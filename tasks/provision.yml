- name: Ensure the SSH key is present
  ec2_key:
    state: present
    region: "{{ ec2_region }}"
    name: "{{ ec2_ssh_key_name }}"
    key_material: "{{ item }}"
  with_file: "{{ ec2_ssh_key }}"

- name: Ensure VPC is present
  ec2_vpc:
    state: present
    region: "{{ ec2_region }}"
    cidr_block: "{{ ec2_subnet }}"
    subnets:
      - cidr: "{{ ec2_subnet }}"
    route_tables:
      - subnets: 
          - "{{ ec2_subnet }}"
        routes:
          - dest: 0.0.0.0/0
            gw: igw
    internet_gateway: yes # we want our instances to connect internet
    wait: yes # wait for the VPC to be in state 'available' before returning
    resource_tags: { environment: "production", tier: "DB" } # we tag this VPC so it will be easier for us to find it later
  register: vpc # store task results in this variable. this will be used when ensuring EC2 instances are present

- name: Ensure the PostgreSQL security group is present
  ec2_group:
    state: present
    vpc_id: "{{ vpc.vpc_id }}"
    region: "{{ ec2_region }}"
    name: "PostgreSQL"
    description: "Security group for PostgreSQL database servers"
    rules:
      - proto: tcp
        from_port: 22
        to_port: 22
        cidr_ip: 0.0.0.0/0
      - proto: all
        from_port: -1
        to_port: -1
        cidr_ip: "{{ ec2_subnet }}"
  register: security_group

- name: Ensure master EC2 instances & volumes are present
  ec2:
    assign_public_ip: yes # our machines should access internet
    instance_tags: { Name: "pg-master {{ postgresql_master_ip }}", environment: "production" }
    exact_count: 1
    count_tag:
      Name: "pg-master {{ postgresql_master_ip }}"
    image: "{{ ec2_ami_id }}"
    instance_type: "{{ ec2_instance_type }}"
    group_id: "{{ security_group.group_id }}"
    key_name: "{{ ec2_ssh_key_name }}"
    private_ip: "{{ postgresql_master_ip }}"
    region: "{{ ec2_region }}"
    volumes:
      - device_name: /dev/sdc
        volume_size: "{{ ec2_data_volume_size }}"
        delete_on_termination: false
    vpc_subnet_id: "{{ vpc.subnets[0].id }}"
    wait: yes
  register: ec2_master

- name: Ensure standby EC2 instances & volumes are present
  ec2:
    assign_public_ip: yes # our machines should access internet
    instance_tags: { Name: "pg-standby {{ item }}", environment: "production" }
    exact_count: 1
    count_tag:
      Name: "pg-standby {{ item }}"
    image: "{{ ec2_ami_id }}"
    instance_type: "{{ ec2_instance_type }}"
    group_id: "{{ security_group.group_id }}"
    key_name: "{{ ec2_ssh_key_name }}"
    private_ip: "{{ item }}"
    region: "{{ ec2_region }}"
    volumes:
      - device_name: /dev/sdc
        volume_size: "{{ ec2_data_volume_size }}"
        delete_on_termination: false
    vpc_subnet_id: "{{ vpc.subnets[0].id }}"
    wait: yes
  with_items: postgresql_standby_ips
  register: ec2_standbys

- name: Ensure master host has the updated IP address
  add_host:
    name: "postgresql-master"
    groups: "postgresql-master"
    ansible_ssh_host: "{{ ec2_master.tagged_instances[0].public_ip }}"
    ansible_ssh_user: "{{ ec2_ssh_user }}"

- name: Ensure standby hosts have updated IP addresses
  add_host:
    name: "postgresql-standby-{{ item.0 + 1 }}"
    groups: "postgresql-standbys"
    ansible_ssh_host: "{{ item.1.tagged_instances[0].public_ip }}"
    ansible_ssh_user: "{{ ec2_ssh_user }}"
  with_indexed_items: ec2_standbys.results

- name: Wait for SSH to become ready
  wait_for: host="{{ item.tagged_instances[0].public_ip }}" port=22 timeout=320 state=started
  with_flattened:
    - [ ec2_master ]
    - ec2_standbys.results

