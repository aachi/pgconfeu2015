- name: Ensure .pgpass is ready
  template:
    src: pgpass.j2
    dest: '/var/lib/postgresql/.pgpass'
    owner: postgres
    group: postgres
    mode: 0640

- name: Ensure .pgpass has right permissions
  file: path=/var/lib/postgresql/.pgpass state=file mode=0600

- name: Ensure the pg_hba.conf file is configured
  template:
    src: pg_hba.conf.j2
    dest: "/etc/postgresql/{{ postgresql_version }}/main/pg_hba.conf"
    owner: postgres
    group: postgres
    mode: 0640
  register: standby_pghba_conf

- name: Check if the standby is already configured by checking if recovery.conf is present
  stat: path="/var/lib/postgresql/{{ postgresql_version }}/main/recovery.conf"
  register: recovery_conf

- name: Stop PostgreSQL if necessary
  service: name=postgresql state=stopped
  when: not recovery_conf.stat.exists is defined or not recovery_conf.stat.exists

- name: Ensure the data directory is empty
  file: path="/var/lib/postgresql/{{ postgresql_version }}/main" state=absent
  when: not recovery_conf.stat.exists is defined or not recovery_conf.stat.exists

- name: Ensure the base backup is retrieved
  command: pg_basebackup -c fast -X stream -h "{{ postgresql_master_ip }}" -D "/var/lib/postgresql/{{ postgresql_version }}/main" -U "{{ postgresql_replication_user.name }}"
  when: not recovery_conf.stat.exists is defined or not recovery_conf.stat.exists

- name: Ensure the recovery.conf file is configured
  template:
    src: recovery.conf.j2
    dest: "/var/lib/postgresql/{{ postgresql_version }}/main/recovery.conf"
    owner: postgres
    group: postgres
    mode: 0640

- name: Restart PostgreSQL if necessary
  service: name=postgresql state=restarted
  when: postgresql_conf.changed

- name: Reload PostgreSQL if necessary
  service: name=postgresql state=reloaded
  when: standby_pghba_conf.changed

# Verify streaming replication works as exptected: wal_file_location, replication func, write-read test
