- name: Ensure the SSH key is present
  ec2_key:
    state: present
    region: "{{ ec2_region }}"
    name: "{{ ec2_ssh_key_name }}"
    key_material: "{{ item }}"
  with_file: "{{ ec2_ssh_key }}"

- name: Ensure VPC is present
  ec2_vpc:
    state: present
    region: "{{ ec2_region }}"
    cidr_block: "{{ ec2_subnet }}"
    subnets:
      - cidr: "{{ ec2_subnet }}"
    route_tables:
      - subnets: 
          - "{{ ec2_subnet }}"
        routes:
          - dest: 0.0.0.0/0
            gw: igw
    internet_gateway: yes # we want our instances to connect internet
    wait: yes # wait for the VPC to be in state 'available' before returning
    resource_tags: { environment: "production", tier: "DB" } # we tag this VPC so it will be easier for us to find it later
  register: vpc # store task results in this variable. this will be used when ensuring EC2 instances are present

- name: Ensure master EC2 instances & volumes are present
  ec2:
    state: present
    assign_public_ip: yes # our machines should access internet
    instance_tags: { role: "master", environment: "production" }
    count_tag: { role: "master"}
    exact_count: 1
    image: "{{ ec2_ami_id }}"
    instance_type: "{{ ec2_instance_type }}"
    key_name: "{{ ec2_ssh_key_name }}"
    private_ip: "{{ postgresql_master_ip }}"
    region: "{{ ec2_region }}"
    termination_protection: yes
    volumes:
      - device_name: /dev/sdb
        volume_size: "{{ ec2_system_volume_size }}"
        delete_on_termination: true
      - device_name: /dev/sdc
        volume_type: gp2
        volume_size: "{{ ec2_data_volume_size }}"
        delete_on_termination: false
    vpc_subnet_id: "{{ item.subnets[0].id }}"
    wait: yes
  with_items: vpc.results

- name: Ensure standby EC2 instances & volumes are present
  ec2:
    state: present
    assign_public_ip: yes # our machines should access internet
    instance_tags: { role: "standby", environment: "production" }
    count_tag: { role: "standby"}
    exact_count: 1
    image: "{{ ec2_ami_id }}"
    instance_type: "{{ ec2_instance_type }}"
    key_name: "{{ ec2_ssh_key_name }}"
    private_ip: "{{ item.0 }}"
    region: "{{ ec2_region }}"
    termination_protection: yes
    volumes:
      - device_name: /dev/sdb
        volume_size: "{{ ec2_system_volume_size }}"
        delete_on_termination: true
      - device_name: /dev/sdc
        volume_type: gp2
        volume_size: "{{ ec2_data_volume_size }}"
        delete_on_termination: false
    vpc_subnet_id: "{{ item.1.subnets[0].id }}"
    wait: yes
  with_nested:
    - postgresql_standby_ips
    - vpc.results

